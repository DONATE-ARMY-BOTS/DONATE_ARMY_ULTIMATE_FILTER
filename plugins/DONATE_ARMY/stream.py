from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply, CallbackQuery
from info import *
from urllib.parse import quote_plus
from util.file_properties import get_name, get_hash, get_media_file_size
from util.human_readable import humanbytes
import humanize
import asyncio
import random

"""add time im seconds for waitingwaiting before delete 
1min=60, 2min=60√ó2=120, 5min=60√ó5=300"""
SECONDS = int(os.getenv("SECONDS", "10"))

@Client.on_message(filters.private & filters.command("stream"))
async def stream_start(client, message):
    if STREAM_MODE == False:
        return 
    msg = await client.ask(message.chat.id, "** ô Ä·¥è …¥·¥è·¥° s·¥á…¥·¥Ö ·¥ç·¥á  è·¥è·¥ú Ä “ì…™ ü·¥á/·¥†…™·¥Ö·¥á·¥è ·¥õ·¥è …¢·¥á·¥õ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö “ì·¥Äs·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã**")
    if not msg.media:
        return await message.reply("** ô Ä Ä·¥ú ú ·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥ç·¥á s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥á·¥Ö…™·¥Ä.**")
    if msg.media in [enums.MessageMediaType.VIDEO, enums.MessageMediaType.DOCUMENT]:
        file = getattr(msg, msg.media.value)
        filename = file.file_name
        filesize = humanize.naturalsize(file.file_size) 
        fileid = file.file_id
        user_id = message.from_user.id
        username =  message.from_user.mention 

        log_msg = await client.send_cached_media(
            chat_id=LOG_CHANNEL,
            file_id=fileid,
        )
        fileName = {quote_plus(get_name(log_msg))}
        lazy_stream = f"{URL}watch/{str(log_msg.id)}/{quote_plus(get_name(log_msg))}?hash={get_hash(log_msg)}"
        lazy_download = f"{URL}{str(log_msg.id)}/{quote_plus(get_name(log_msg))}?hash={get_hash(log_msg)}"
 
        await log_msg.reply_text(
            text=f"‚Ä¢‚Ä¢  ü…™…¥·¥ã …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö Íú∞·¥è Ä …™·¥Ö #{user_id} \n‚Ä¢‚Ä¢ ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á : {username} \n\n‚Ä¢‚Ä¢ “ì…™ ü·¥á …¥·¥Ä·¥ç·¥á : {fileName}",
            quote=True,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ä¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö", url=lazy_download),  # we download Link
                                                InlineKeyboardButton('s·¥õ Ä·¥á·¥Ä·¥ç ‚Ä¢', url=lazy_stream)]])  # web stream Link
        )
        rm=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚Ä¢ s·¥õ Ä·¥á·¥Ä·¥ç", url=lazy_stream),
                    InlineKeyboardButton('·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚Ä¢', url=lazy_download)
                ]
            ] 
        )
        msg_text = """<i><u> ô Ä·¥è  ú·¥á Ä·¥á's  è·¥è·¥ú Ä …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö !</u></i>\n\n<b>üìÇ F…™ ü·¥á …¥·¥Ä·¥ç·¥á :</b> <i>{}</i>\n\n<b>üì¶ F…™ ü·¥á Íú±…™·¥¢·¥á :</b> <i>{}</i>\n\n<b>üì• D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö :</b> <i>{}</i>\n\n<b> üñ•·¥°·¥Ä·¥õ·¥Ñ ú  :</b> <i>{}</i>\n\n<b>üö∏ N·¥è·¥õ·¥á :  ü…™…¥·¥ã ·¥°·¥è…¥'·¥õ ·¥áx·¥ò…™ Ä·¥á ·¥õ…™ ü ü …™ ·¥Ö·¥á ü·¥á·¥õ·¥á</b>\n\nBaka! Link will be deleted After 1 minutes. Save them to the Saved Message now!.</b>"""

        lazy_d = await message.reply_text(text=msg_text.format(get_name(log_msg), humanbytes(get_media_file_size(msg)), lazy_download, lazy_stream), quote=True, disable_web_page_preview=True, reply_markup=rm)
        await asyncio.sleep(60)
        await lazy_d.delete()
